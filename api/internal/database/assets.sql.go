// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: assets.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAsset = `-- name: CreateAsset :one
INSERT INTO assets(id, symbol, price, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, symbol, price, created_at, updated_at
`

type CreateAssetParams struct {
	ID        uuid.UUID
	Symbol    string
	Price     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAsset(ctx context.Context, arg CreateAssetParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, createAsset,
		arg.ID,
		arg.Symbol,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAssets = `-- name: GetAllAssets :many
SELECT id, symbol, price, created_at, updated_at FROM assets
`

func (q *Queries) GetAllAssets(ctx context.Context) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, getAllAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

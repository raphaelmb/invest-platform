// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: wallets.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallet(id, created_at, updated_at)
VALUES($1, $2, $3)
RETURNING id, created_at, updated_at
`

type CreateWalletParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet, arg.ID, arg.CreatedAt, arg.UpdatedAt)
	var i Wallet
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getAllWallets = `-- name: GetAllWallets :many
SELECT id, created_at, updated_at FROM wallet
`

func (q *Queries) GetAllWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.QueryContext(ctx, getAllWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

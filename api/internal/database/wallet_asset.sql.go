// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: wallet_asset.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createWalletAsset = `-- name: CreateWalletAsset :one
INSERT INTO wallet_asset(id, amount, created_at, updated_at, wallet_id, asset_id, shares)
VALUES($1, $2, $3, $4, $5, $6, $7)
RETURNING id, amount, shares, created_at, updated_at, wallet_id, asset_id
`

type CreateWalletAssetParams struct {
	ID        uuid.UUID
	Amount    string
	CreatedAt time.Time
	UpdatedAt time.Time
	WalletID  uuid.UUID
	AssetID   uuid.UUID
	Shares    int32
}

func (q *Queries) CreateWalletAsset(ctx context.Context, arg CreateWalletAssetParams) (WalletAsset, error) {
	row := q.db.QueryRowContext(ctx, createWalletAsset,
		arg.ID,
		arg.Amount,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.WalletID,
		arg.AssetID,
		arg.Shares,
	)
	var i WalletAsset
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Shares,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WalletID,
		&i.AssetID,
	)
	return i, err
}

const getAllWalletAsset = `-- name: GetAllWalletAsset :many
SELECT wa.id, wa.amount, wa.shares, wa.created_at, wa.updated_at, wa.wallet_id, wa.asset_id, a.symbol AS asset_symbol, a.price AS asset_price
FROM wallet_asset AS wa
JOIN assets as a ON wa.asset_id = a.id
WHERE wa.wallet_id = $1
`

type GetAllWalletAssetRow struct {
	ID          uuid.UUID
	Amount      string
	Shares      int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
	WalletID    uuid.UUID
	AssetID     uuid.UUID
	AssetSymbol string
	AssetPrice  string
}

func (q *Queries) GetAllWalletAsset(ctx context.Context, walletID uuid.UUID) ([]GetAllWalletAssetRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllWalletAsset, walletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWalletAssetRow
	for rows.Next() {
		var i GetAllWalletAssetRow
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Shares,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WalletID,
			&i.AssetID,
			&i.AssetSymbol,
			&i.AssetPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
